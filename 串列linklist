#include "stdio.h"
#include "stdlib.h"
#include "linklist.h"

struct list{
		struct list* pri=NULL;  ///指標向上一個位址 
		struct list* next=NULL; ///指標向下一個位址
		int data;
	};
static struct list* header;

int main(){
	int s=0, value;
	header = NULL;  
	while(s!=4){
		printf("1. Add a new element, 2. Delete an element, 3. Show the list, 4. Exit\n");
		scanf("%d",&s);
		if(s==1){
			printf("Input the element:");
			scanf("%d", &value);
			if(header == NULL){
				header = createlist(header, value);  ///裡面是空的建立資料 
			}
			else header = Add(header, value); ///裡面不是空的加入資料  
		}
		if(s==2){
			printf("Delete the element:");
			scanf("%d", &value);
			header = Delete(header, value);
		}
		if(s==3){
			header = Show(header);
		}
	}
	return 0;	
}


struct list* createlist(struct list* header, int value){
	header = (struct list *)malloc(sizeof(struct list)); ///malloc(memory allocation)記憶體配置  sizeof(struct list)該list結構空間大小 
	if(header == NULL) return NULL; ///配置失敗回傳NULL 
	header->data = value;
	header->next = NULL;
	header->pri = NULL;
	return header;
}

struct list* Add(struct list* header, int value){
	struct list* current;
	current = header;
	while(current->next != NULL){   ///current偵測next是否為空的 
		current = current->next;    ///next有資料的話再跳下一個 
	}	
	current->next = (struct list *)malloc(sizeof(struct list));
	current->next->data = value;
	current->next->pri = current;
	current->next->next = NULL;
	return header;
}

struct list* Delete(struct list* header, int value){
	struct list* current;
	current = header;
	while(current->data != value){   ///current偵測data是否為(刪除)輸入的值 
		current = current->next;     ///data不是輸入的值的話再跳下一個 
	}
	if (current->pri == NULL){
		header = current->next;
		header->pri = NULL;
		header->next = current->next->next;
		
	}
	else{
		current->pri->next = current->next;
		current->next->pri = current->pri;
	}
	free(current); ///釋放記憶體空間 
	return header;
}

struct list* Show(struct list* header){
	struct list* current;
	current = header;
	while(current!=NULL){
		printf("%d, ", current->data);
		current = current->next;
	}
	printf("\n");
	return header;
}

